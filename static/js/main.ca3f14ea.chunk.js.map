{"version":3,"sources":["components/Card/Card.component.jsx","components/CardList/CardList.component.jsx","components/SearchBox/SearchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","title","alt","src","posterPath","CardList","data","map","toDo","index","key","name","poster_path","SearchBox","type","placeholder","onChange","changeHandler","axios","require","App","event","setState","searchString","target","value","console","log","state","toDos","get","headers","Authorization","then","response","results","this","filteredData","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sVAeeA,G,YAbF,SAACC,GACZ,OACE,yBAAKC,UAAU,QACZD,EAAME,MACP,yBACEC,IAAKH,EAAME,MACXE,IAAG,8CAAyCJ,EAAMK,YAClDJ,UAAU,iBCWHK,G,MAhBE,SAACN,GAChB,OACE,yBAAKC,UAAU,YACZD,EAAMO,KAAKC,KAAI,SAACC,EAAMC,GACrB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLR,MAAOO,EAAKG,KACZP,WAAYI,EAAKI,oB,MCEdC,MAZf,SAAmBd,GACjB,OACE,yBAAKC,UAAU,aACb,2BACEc,KAAK,SACLd,UAAU,cACVe,YAAY,iBACZC,SAAUjB,EAAMkB,kBCLlBC,EAAQC,EAAQ,IAkDPC,E,kDA/Cb,aAAe,IAAD,8BACZ,gBAyBFH,cAAgB,SAACI,GACf,EAAKC,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,QAAS,kBAClDC,QAAQC,IAAI,EAAKC,MAAML,kBA1BzB,EAAKK,MAAQ,CACXC,MAAO,GACPN,aAAc,IAJJ,E,gEAQO,IAAD,OAQlBL,EACGY,IAAI,gDAAiD,CACpDC,QATY,CACd,eAAgB,iCAChBC,cACE,gOAQDC,MAAK,SAACC,GACLR,QAAQC,IAAIO,GACZ,EAAKZ,SAAS,CAAEO,MAAOK,EAAS5B,KAAK6B,e,+BASjC,IAAD,EACyBC,KAAKR,MAA7BC,EADD,EACCA,MAAON,EADR,EACQA,aAETc,EAAeR,EAAMS,QAAO,SAAC9B,GAAD,OAChCA,EAAKG,KAAK4B,cAAcC,SAASjB,EAAagB,kBAEhD,OACE,6BACE,wBAAIvC,UAAU,eAAd,iBACA,kBAAC,EAAD,CAAWiB,cAAemB,KAAKnB,gBAC/B,kBAAC,EAAD,CAAUX,KAAM+B,S,GA1CNI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.ca3f14ea.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.component.css\";\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      {props.title}\n      <img\n        alt={props.title}\n        src={`https://image.tmdb.org/t/p/original/${props.posterPath}`}\n        className=\"imageCard\"\n      ></img>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./../Card/Card.component\";\nimport \"./CardList.component.css\";\n\nconst CardList = (props) => {\n  return (\n    <div className=\"cardList\">\n      {props.data.map((toDo, index) => {\n        return (\n          <Card\n            key={index}\n            title={toDo.name}\n            posterPath={toDo.poster_path}\n          ></Card>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBox.component.css\";\nfunction SearchBox(props) {\n  return (\n    <div className=\"searchBox\">\n      <input\n        type=\"search\"\n        className=\"searchInput\"\n        placeholder=\"Search TV show\"\n        onChange={props.changeHandler}\n      ></input>\n    </div>\n  );\n}\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/CardList/CardList.component\";\nimport SearchBox from \"./components/SearchBox/SearchBox.component\";\nconst axios = require(\"axios\");\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      toDos: [],\n      searchString: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const headers = {\n      \"Content-Type\": \"application/json;charset=utf-8\",\n      Authorization:\n        \"Bearer \" +\n        \"eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJjMWIxMDEyODU2MGIzZTRmYTJiMWUzMTY1OTQ4YmQ1MyIsInN1YiI6IjVkNTUyYTBiYmM4NjU3NGIzNjJiZTMyMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.HUWPGPqnJbEdM1smasewVvnNBk87Ii9BG7OjVcNQl5g\",\n    };\n\n    axios\n      .get(\"https://api.themoviedb.org/3/tv/37854/similar\", {\n        headers: headers,\n      })\n      .then((response) => {\n        console.log(response);\n        this.setState({ toDos: response.data.results });\n      });\n  }\n\n  changeHandler = (event) => {\n    this.setState({ searchString: event.target.value }, () =>\n      console.log(this.state.searchString)\n    );\n  };\n  render() {\n    const { toDos, searchString } = this.state;\n\n    const filteredData = toDos.filter((toDo) =>\n      toDo.name.toLowerCase().includes(searchString.toLowerCase())\n    );\n    return (\n      <div>\n        <h1 className=\"mainHeading\">Watched List </h1>\n        <SearchBox changeHandler={this.changeHandler}></SearchBox>\n        <CardList data={filteredData}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}